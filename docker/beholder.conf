flow {
    from udp 3820;
    parse syslog;
    to stdout;
}

## Listen on a UDP port and write every incoming packet as a line into a file
#flow {
#    from udp 1234;
#    to file /var/log/beholder/from-udp-1234.log;
#}

## Receive nginx access log over UDP and write it into a file
#flow {
#    from udp 3820;
#    parse syslog;
#    to file '.../access.log';
#}

## Send internal Beholder log as syslog over UDP
#flow {
#    from internal-log;
#    set $payload syslog;
#    to udp 1234;
#}

## Receive nginx logs by UDP and send them into syslog-ng over TCP
#flow {
#    from udp 3820;
#    parse syslog; # Convert bsd-syslog into Beholder fields
#
#    set $payload syslog; # Convert Beholder fields into ietf-syslog
#    set $payload "$payload\n";
#    set $payload syslog-frame; # syslog-ng wants the message to be prefixed with its length and a space
#    to tcp 10.64.1.1:5142;
#}

## Send Beholder stats as metrics into InfluxDB (all metrics as one measurement)
#flow {
#    from timer 30 seconds;
#
#    # These fields will become tags in Influx (that's how `parse beholder-stats` works)
#    set $host host;
#    set $tag value;
#    keep $host $tag;
#
#    parse beholder-stats;
#    set $payload $influxLineProtocolPayload;
#    to udp influx:1234;
#}

## Send Beholder stats as metrics into InfluxDB (each metric separately)
#flow {
#    from timer 30 seconds;
#
#    parse beholder-stats; # Populate the message with stat fields like $uptimeSeconds
#    parse each-field-as-message; # Convert fields to separate messages
#    switch $value { case ~^[0-9]+$~ {} } # Drop messages with non-numeric values like $date
#
#    # Format the message as line protocol of InfluxDB and send
#    set $host host;
#    set $payload 'beholder,host=$host $key=$value';
#    to udp influx:1234;
#}



###
## SETTINGS
#

# When Beholder creates a datetime (e.g. when a new message is received), it uses system timezone.
# You can override this by setting `create_dates_in_timezone` to a desired timezone.
# See https://docs.oracle.com/javase/9/docs/api/java/time/ZoneId.html#of-java.lang.String- for details.
# Example timezones: `UTC`, `Europe/Moscow`.
# When a date is received in a message (not created), Beholder will try to keep its timezone intact.

#create_dates_in_timezone UTC;

# When messages cannot be processed quick enough, they are stored in queues.
# When the config is being reloaded, incoming messages are stored in from-queues.
# When a destination (e.g. a TCP server) is unavailable, outgoing payloads are stored in to-queues.
#
# A queue will group messages into chunks. When there are a lot of chunks in a queue, they get stored in a buffer.
# Currently there is only one buffer for all this data: the default buffer. Default buffer size can be set using
# `buffer_memory_bytes` option. You can specify a number of bytes or use a suffix: `k`, `m`, `g`.
#
# `buffer_memory_bytes` is NOT the total memory limit of Beholder. In addition to unbuffered messages in queues,
# there are lots of things on JVM that eat bytes. Watch your metrics!

#buffer_memory_bytes 128m;
#queue_chunk_messages 500;

# When a queue chunk is buffered, it is compressed. You can turn off compression with `buffer_compression off`.

#buffer_compression lz4-fast; # One of: lz4-fast, off
