apply plugin: 'download-task'
apply plugin: 'kotlin'

// relative to 'frontend' dir
def JS_PATH = '../src/main/resources/beholder/backend/web'

def KOTLINC_ZIP_URL = 'https://github.com/JetBrains/kotlin/releases/download/build-0.8.11/kotlin-compiler-0.8.11.zip'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}
dependencies {
    compile 'org.jetbrains.kotlin:kotlin-js-library:0.7.+'
}

// removing dependency on 'jar' because we don't want it, but still need 'kotlin' plugin for 'compile' in dependencies
assemble.dependsOn = ['compileJs']

clean.dependsOn 'cleanFrontend'

task cleanFrontend << {
    delete 'build'
    delete "${JS_PATH}/script.js"
}

task downloadKotlinCompiler << {
    def zipfile = file('build/kotlin-compiler.zip')
    if (!zipfile.exists()) {
        download {
            src KOTLINC_ZIP_URL
            dest zipfile
        }
    }
}

task setupKotlinJsCompiler(dependsOn: 'downloadKotlinCompiler') << {
    if (!file('build/kotlinc/bin/kotlinc-js').exists()) {
        def zipfile = file('build/kotlin-compiler.zip')
        assert zipfile.exists(), "Downloading kotlin compiler failed"

        copy {
            from zipTree(zipfile)
            into 'build'
        }
    }

    assert file('build/kotlinc/bin/kotlinc-js').exists(), 'Downloaded kotlin compiler is corrupt'

    // TODO copy kotlin-*.js from kotlin-js-library.jar to web resources
}

task compileJs(dependsOn: 'setupKotlinJsCompiler') << {
    // ./koco/kotlinc/bin/kotlinc-js -sourceFiles src/main/kotlin/web.kt -output ./script/kkk.js -libraryFiles koco/kotlinc/lib/kotlin-jslib.jar
    def jsLib   = project.configurations.compile.find { it.name.startsWith("kotlin-js-library-") }
    def kotlinc = file('build/kotlinc/bin/kotlinc-js').canonicalPath
    def out     = file("${JS_PATH}/script.js").canonicalPath
    def source  = file('src/main/kotlin').canonicalPath

    // TODO proper argument escaping if possible
    def command = "${kotlinc} -output ${out} -libraryFiles ${jsLib} -sourceFiles ${source}"

    def proc = command.execute()
    proc.waitFor()
    assert proc.exitValue() == 0, "Command failed: ${command}\nCommand output:\n${proc.text}"
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
