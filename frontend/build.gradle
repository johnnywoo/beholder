apply plugin: 'download-task'

// relative to 'frontend' dir
def JS_PATH = '../src/main/resources/beholder/backend/web'

def KOTLINC_ZIP_URL = 'https://github.com/JetBrains/kotlin/releases/download/build-0.8.11/kotlin-compiler-0.8.11.zip'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.+'
    }
}

configurations {
    compile
}
repositories {
    mavenCentral()
}
dependencies {
    compile 'org.jetbrains.kotlin:kotlin-js-library:0.7.+'
}

task clean {}

tasks.clean.dependsOn 'cleanFrontendBuild'
tasks.clean.dependsOn 'cleanBundledKotlinJs'
tasks.clean.dependsOn 'cleanCompiledJs'

task cleanFrontendBuild {
    doLast {
        delete 'build'
    }
}

task downloadKotlinCompiler {
    outputs.upToDateWhen {file('build/kotlin-compiler.zip').exists()}
    doLast {
        download {
            src  KOTLINC_ZIP_URL
            dest file('build/kotlin-compiler.zip')
        }
    }
}

def libJsFiles = ['kotlin-lib.js', 'kotlin-lib-ecma5.js', 'kotlin-maps.js']
task copyBundledKotlinJs {
    outputs.upToDateWhen { libJsFiles.find {!file(JS_PATH + '/' + it).exists()} == null }
    doLast {
        def jsLib = project.configurations.compile.find { it.name.startsWith("kotlin-js-library-") }
        copy {
            from zipTree(file(jsLib))
            include libJsFiles
            into JS_PATH
        }
    }
}
task cleanBundledKotlinJs {
    doLast {
        libJsFiles.each {delete JS_PATH + '/' + it}
    }
}

task setupKotlinJsCompiler {
    dependsOn 'downloadKotlinCompiler'
    outputs.upToDateWhen {file('build/kotlinc/bin/kotlinc-js').exists()}
    doLast {
        def zipfile = file('build/kotlin-compiler.zip')
        assert zipfile.exists(), "Downloading kotlin compiler failed"

        copy {
            from zipTree(zipfile)
            into 'build'
        }

        assert file('build/kotlinc/bin/kotlinc-js').exists(), 'Downloaded kotlin compiler is corrupt'
    }
}

task compileJs {
    dependsOn 'setupKotlinJsCompiler'
    dependsOn 'copyBundledKotlinJs'
    doLast {
        def jsLib   = project.configurations.compile.find { it.name.startsWith("kotlin-js-library-") }
        def kotlinc = file('build/kotlinc/bin/kotlinc-js').canonicalPath
        def out     = file("${JS_PATH}/script.js").canonicalPath
        def source  = file('src/main/kotlin').canonicalPath

        // TODO proper argument escaping if possible
        def command = "${kotlinc} -sourcemap -output ${out} -libraryFiles ${jsLib} -sourceFiles ${source}"

        def proc = command.execute()
        proc.waitFor()
        assert proc.exitValue() == 0, "Command failed: ${command}\nCommand output:\n${proc.text}"
    }
}
task cleanCompiledJs {
    doLast {
        delete "${JS_PATH}/script.js"
        delete "${JS_PATH}/script.js.map"
    }
}
